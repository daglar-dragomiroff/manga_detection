# fix_dependencies.py - –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
import subprocess
import sys
import os

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def fix_googletrans_conflict():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å googletrans"""
    print("üöÄ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    commands = [
        ("pip uninstall googletrans -y", "–£–¥–∞–ª–µ–Ω–∏–µ googletrans"),
        ("pip uninstall httpx -y", "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ httpx"),
        ("pip install httpx>=0.28.0", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ httpx"),
        ("pip install deep-translator>=1.11.4", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ deep-translator"),
    ]
    
    for command, description in commands:
        run_command(command, description)

def install_tesseract_languages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ Tesseract"""
    print("üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ Tesseract...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
    if sys.platform.startswith('linux'):
        commands = [
            ("sudo apt-get update", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤"),
            ("sudo apt-get install -y tesseract-ocr", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract"),
            ("sudo apt-get install -y tesseract-ocr-jpn", "–Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫"),
            ("sudo apt-get install -y tesseract-ocr-kor", "–ö–æ—Ä–µ–π—Å–∫–∏–π —è–∑—ã–∫"),
            ("sudo apt-get install -y tesseract-ocr-chi-sim", "–ö–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫"),
            ("sudo apt-get install -y tesseract-ocr-rus", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"),
        ]
        
        for command, description in commands:
            run_command(command, description)
            
    elif sys.platform == 'darwin':  # macOS
        commands = [
            ("brew install tesseract", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract"),
            ("brew install tesseract-lang", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"),
        ]
        
        for command, description in commands:
            run_command(command, description)
            
    else:  # Windows
        print("ü™ü –î–ª—è Windows:")
        print("1. –°–∫–∞—á–∞–π—Ç–µ Tesseract: https://github.com/UB-Mannheim/tesseract/wiki")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ C:\\Program Files\\Tesseract-OCR\\")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH: C:\\Program Files\\Tesseract-OCR\\")

def reinstall_ocr_packages():
    """–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ OCR –ø–∞–∫–µ—Ç–æ–≤"""
    print("üì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ OCR –ø–∞–∫–µ—Ç–æ–≤...")
    
    commands = [
        ("pip uninstall paddlepaddle paddleocr -y", "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"),
        ("pip install paddlepaddle>=3.0.0", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PaddlePaddle"),
        ("pip install paddleocr>=3.1.0", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PaddleOCR"),
        ("pip install easyocr>=1.7.0", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ EasyOCR"),
        ("pip install pytesseract>=0.3.10", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTesseract"),
    ]
    
    for command, description in commands:
        run_command(command, description)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üõ†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–∞–Ω–≥–∞-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞\n")
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç googletrans/httpx")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã Tesseract")
    print("3. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å OCR –ø–∞–∫–µ—Ç—ã")
    print("4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("0. –í—ã—Ö–æ–¥")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-4): ").strip()
        
        if choice == '1':
            fix_googletrans_conflict()
        elif choice == '2':
            install_tesseract_languages()
        elif choice == '3':
            reinstall_ocr_packages()
        elif choice == '4':
            fix_googletrans_conflict()
            print("\n" + "="*50)
            install_tesseract_languages()
            print("\n" + "="*50)
            reinstall_ocr_packages()
        elif choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
            
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_check.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
    except KeyboardInterrupt:
        print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()