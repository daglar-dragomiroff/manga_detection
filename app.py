# app.py - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∑–∞–ª–∏–≤–∫–æ–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import streamlit as st
import numpy as np
from PIL import Image
import os
import io
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.detection import BubbleDetector
from src.ocr import TextExtractor
from src.translation import TextTranslator
from src.inpainting import TextInpainter  # –ù–û–í–´–ô –ú–û–î–£–õ–¨
from src.utils import (save_uploaded_file, validate_image, create_result_summary,
                       get_language_flag, get_language_name)
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Manga Translator Pro",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_css():
    css_file = BASE_DIR / "static" / "styles.css"
    if css_file.exists():
        with open(css_file) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

@st.cache_resource
def load_models():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        detector = BubbleDetector(str(MODEL_PATH), DETECTION_CONFIDENCE)
        st.success("‚úÖ –ú–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
        return None, None, None, None
    
    try:
        ocr = TextExtractor()
        st.success("‚úÖ OCR —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
        return detector, None, None, None
    
    try:
        translator = TextTranslator()
        st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {e}")
        return detector, ocr, None, None
    
    try:
        inpainter = TextInpainter()  # –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
        st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ª–∏–≤–∫–∏ –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ª–∏–≤–∫–∏: {e}")
        return detector, ocr, translator, None
    
    return detector, ocr, translator, inpainter

def get_text_formatting_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    with st.sidebar.expander("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", expanded=False):
        
        # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–ª–∏–≤–∫—É
        enable_inpainting = st.checkbox(
            "üñåÔ∏è –í–∫–ª—é—á–∏—Ç—å –∑–∞–ª–∏–≤–∫—É —Ç–µ–∫—Å—Ç–∞",
            value=DEFAULT_TEXT_SETTINGS['enable_inpainting'],
            help="–ó–∞–∫—Ä–∞—à–∏–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
        )
        
        if not enable_inpainting:
            return None
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìù –®—Ä–∏—Ñ—Ç:**")
            
            font_family = st.selectbox(
                "–°–µ–º–µ–π—Å—Ç–≤–æ:",
                options=TEXT_FORMATTING['font_families'],
                index=0,
                label_visibility="collapsed"
            )
            
            auto_font_size = st.checkbox(
                "–ê–≤—Ç–æ —Ä–∞–∑–º–µ—Ä",
                value=DEFAULT_TEXT_SETTINGS['auto_font_size'],
                help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
            )
            
            if not auto_font_size:
                font_size = st.slider(
                    "–†–∞–∑–º–µ—Ä:",
                    min_value=TEXT_FORMATTING['min_font_size'],
                    max_value=TEXT_FORMATTING['max_font_size'],
                    value=DEFAULT_TEXT_SETTINGS['font_size'],
                    step=2,
                    label_visibility="collapsed"
                )
            else:
                font_size = DEFAULT_TEXT_SETTINGS['font_size']
            
            alignment = st.selectbox(
                "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ:",
                options=list(TEXT_ALIGNMENTS.keys()),
                index=1,  # –ü–æ —Ü–µ–Ω—Ç—Ä—É
                format_func=lambda x: x,
                label_visibility="collapsed"
            )
        
        with col2:
            st.markdown("**üé® –¶–≤–µ—Ç–∞:**")
            
            # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            font_color_preset = st.selectbox(
                "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞:",
                options=list(PRESET_COLORS.keys()),
                index=0,  # –ß–µ—Ä–Ω—ã–π
                label_visibility="collapsed"
            )
            
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞
            bg_color_preset = st.selectbox(
                "–¶–≤–µ—Ç —Ñ–æ–Ω–∞:",
                options=list(PRESET_COLORS.keys()),
                index=1,  # –ë–µ–ª—ã–π
                label_visibility="collapsed"
            )
            
            transparency = st.slider(
                "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–æ–Ω–∞:",
                min_value=0.0,
                max_value=1.0,
                value=DEFAULT_TEXT_SETTINGS['transparency'],
                step=0.1,
                label_visibility="collapsed"
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"):
            stroke_width = st.slider(
                "–¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏:",
                min_value=0,
                max_value=5,
                value=DEFAULT_TEXT_SETTINGS['stroke_width']
            )
            
            if stroke_width > 0:
                stroke_color_preset = st.selectbox(
                    "–¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏:",
                    options=list(PRESET_COLORS.keys()),
                    index=0  # –ß–µ—Ä–Ω—ã–π
                )
            else:
                stroke_color_preset = '–ß–µ—Ä–Ω—ã–π'
            
            padding = st.slider(
                "–û—Ç—Å—Ç—É–ø—ã:",
                min_value=0,
                max_value=20,
                value=DEFAULT_TEXT_SETTINGS['padding']
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = {
            'font_family': font_family,
            'font_size': font_size,
            'font_color': PRESET_COLORS[font_color_preset],
            'bg_color': PRESET_COLORS[bg_color_preset],
            'stroke_width': stroke_width,
            'stroke_color': PRESET_COLORS[stroke_color_preset],
            'padding': padding,
            'alignment': TEXT_ALIGNMENTS[alignment],
            'transparency': transparency,
            'auto_font_size': auto_font_size,
            'enable_inpainting': True,
        }
        
        return settings

def process_manga_page_with_inpainting(image_path, detector, ocr, translator, inpainter, 
                                     source_lang, target_lang, text_settings=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–Ω–≥–∏ –° –∑–∞–ª–∏–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞"""
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –ø—É–∑—ã—Ä–µ–π
    with st.spinner("üîç –ü–æ–∏—Å–∫ —Ä–µ—á–µ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π..."):
        bubbles = detector.detect_bubbles(image_path)
    
    if not bubbles:
        st.warning("‚ö†Ô∏è –†–µ—á–µ–≤—ã–µ –ø—É–∑—ã—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
        return [], None
    
    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bubbles)} —Ä–µ—á–µ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π")
    
    # OCR –∏ –ø–µ—Ä–µ–≤–æ–¥
    results = []
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, bubble in enumerate(bubbles):
        progress_bar.progress((i + 1) / len(bubbles))
        status_text.text(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–∑—ã—Ä—è {i+1}/{len(bubbles)} (—è–∑—ã–∫: {get_language_flag(source_lang)} {get_language_name(source_lang)})")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        original_text = ocr.extract_text_simple(image_path, bubble['bbox'], source_lang)
        
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        translated_text = ""
        if original_text:
            if source_lang != target_lang:
                translated_text = translator.translate(original_text, source_lang, target_lang)
            else:
                translated_text = original_text  # –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ—Å–ª–∏ —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        
        results.append({
            'bbox': bubble['bbox'],
            'confidence': bubble['confidence'],
            'class_id': bubble['class_id'],
            'original_text': original_text,
            'translated_text': translated_text,
            'source_language': source_lang,
            'target_language': target_lang
        })
    
    progress_bar.empty()
    status_text.empty()
    
    # –ù–û–í–ê–Ø –ß–ê–°–¢–¨: –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–ª–∏–≤–∫–æ–π
    final_image = None
    if text_settings and text_settings.get('enable_inpainting', False):
        with st.spinner("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∑–∞–ª–∏–≤–∫–æ–π..."):
            try:
                final_image = inpainter.inpaint_and_replace_text(
                    image_path, results, text_settings
                )
                st.success("‚úÖ –ó–∞–ª–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ª–∏–≤–∫–∏: {e}")
                final_image = None
    
    return results, final_image

def create_download_link(image_array, filename="translated_manga.png"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.fromarray(image_array.astype('uint8'), 'RGB')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
    img_buffer = io.BytesIO()
    image.save(img_buffer, format='PNG')
    img_data = img_buffer.getvalue()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    st.download_button(
        label="üíæ –°–∫–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é –º–∞–Ω–≥—É",
        data=img_data,
        file_name=filename,
        mime="image/png",
        use_container_width=True
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    load_css()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìö –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–∞–Ω–≥–∏ Pro (—Å –∑–∞–ª–∏–≤–∫–æ–π)</h1>', 
                unsafe_allow_html=True)
    
    st.markdown("""
    ### üéØ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫:
    - **üìù –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤** - —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    - **üé® –£–º–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞** - –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ + –≤—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞  
    - **üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞** - —à—Ä–∏—Ñ—Ç, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, –æ–±–≤–æ–¥–∫–∞
    - **üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞** - –≥–æ—Ç–æ–≤–∞—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è –º–∞–Ω–≥–∞
    - **üåç 5 —è–∑—ã–∫–æ–≤ OCR**: üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π, üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π, üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π, üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, üá∑üá∫ –†—É—Å—Å–∫–∏–π
    """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    source_lang = st.sidebar.selectbox(
        "üî§ –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ):",
        options=['ja', 'ko', 'zh', 'en', 'ru'],
        format_func=lambda x: f"{get_language_flag(x)} {get_language_name(x)}",
        index=0,  # –Ø–ø–æ–Ω—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∞–Ω–≥–∏
        help="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–∞—à–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
    )
    
    target_lang = st.sidebar.selectbox(
        "üåê –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:",
        options=['ru', 'en', 'ja', 'ko', 'zh'],
        format_func=lambda x: f"{get_language_flag(x)} {get_language_name(x)}",
        index=0,  # –†—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        help="–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
    if source_lang == target_lang:
        st.sidebar.info("‚ÑπÔ∏è –Ø–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω")
    else:
        st.sidebar.success(f"‚úÖ {get_language_flag(source_lang)} ‚Üí {get_language_flag(target_lang)}")
    
    confidence = st.sidebar.slider(
        "üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏:",
        min_value=0.1,
        max_value=1.0,
        value=DETECTION_CONFIDENCE,
        step=0.1,
        help="–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è = –º–µ–Ω—å—à–µ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"
    )
    
    # –ù–û–í–ê–Ø –ß–ê–°–¢–¨: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text_settings = get_text_formatting_settings()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–∞—Ö
    with st.sidebar.expander("‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏"):
        st.write("**üî§ OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ):**")
        st.write("üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π - —Ö–∏—Ä–∞–≥–∞–Ω–∞, –∫–∞—Ç–∞–∫–∞–Ω–∞, –∫–∞–Ω–¥–∑–∏")
        st.write("üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π - —Ö–∞–Ω–≥—ã–ª—å")  
        st.write("üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π")
        st.write("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - –ª–∞—Ç–∏–Ω–∏—Ü–∞")
        st.write("üá∑üá∫ –†—É—Å—Å–∫–∏–π - –∫–∏—Ä–∏–ª–ª–∏—Ü–∞")
        
        st.write("**üåê –ü–µ—Ä–µ–≤–æ–¥:**")
        st.write("–õ—é–±—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Google Translate")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    with st.spinner("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π..."):
        detector, ocr, translator, inpainter = load_models()
    
    if not all([detector, ocr, translator, inpainter]):
        st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        return
    
    detector.confidence = confidence
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–Ω–≥–∏",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
    )
    
    if uploaded_file is not None:
        if not validate_image(uploaded_file):
            st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä")
            return
        
        image_path = save_uploaded_file(uploaded_file)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üì∏ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            image = Image.open(image_path)
            st.image(image, use_container_width=True)
            st.caption(f"–†–∞–∑–º–µ—Ä: {image.size[0]}√ó{image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_button_text = "üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
        if text_settings and text_settings.get('enable_inpainting'):
            process_button_text += " + –ó–∞–ª–∏–≤–∫–∞"
        else:
            process_button_text += " (–±–µ–∑ –∑–∞–ª–∏–≤–∫–∏)"
        
        process_button_text += f" ({get_language_flag(source_lang)} ‚Üí {get_language_flag(target_lang)})"
        
        if st.button(process_button_text, type="primary", use_container_width=True):
            
            results, final_image = process_manga_page_with_inpainting(
                image_path, detector, ocr, translator, inpainter, 
                source_lang, target_lang, text_settings
            )
            
            if results:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ò –¥–µ—Ç–µ–∫—Ü–∏—é –ò –∑–∞–ª–∏–≤–∫—É
                with col2:
                    # –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
                    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏")
                    bubbles = [{'bbox': r['bbox'], 'confidence': r['confidence']} 
                              for r in results]
                    visualization = detector.visualize_detection(image_path, bubbles)
                    st.image(visualization, use_container_width=True)
                    
                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ª–∏–≤–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if final_image is not None:
                        st.subheader("üé® –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–ª–∏–≤–∫–æ–π")
                        st.image(final_image, use_container_width=True)
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        create_download_link(final_image, f"translated_{uploaded_file.name}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                st.session_state['results'] = results
                st.session_state['image_path'] = image_path
                st.session_state['text_settings'] = text_settings
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                summary = create_result_summary(results)
                
                st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                
                with col_stats1:
                    st.metric("üéØ –ù–∞–π–¥–µ–Ω–æ –ø—É–∑—ã—Ä–µ–π", summary['total_bubbles'])
                
                with col_stats2:
                    st.metric("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ç–µ–∫—Å—Ç–∞", 
                             f"{summary['successful_ocr']}/{summary['total_bubbles']}")
                    st.caption(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['ocr_success_rate']:.1f}%")
                
                with col_stats3:
                    if source_lang == target_lang:
                        st.metric("üîÑ –ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞", summary['total_bubbles'])
                        st.caption("–Ø–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
                    else:
                        st.metric("üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ", 
                                 f"{summary['successful_translation']}/{summary['total_bubbles']}")
                        st.caption(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['translation_success_rate']:.1f}%")
                
                # –ù–û–í–ê–Ø –ß–ê–°–¢–¨: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                st.markdown("### üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –§–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                changes_made = False
                
                for i, result in enumerate(results):
                    confidence = result['confidence']
                    source_flag = get_language_flag(source_lang)
                    target_flag = get_language_flag(target_lang)
                    
                    # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
                    conf_icon = "üü¢" if confidence > 0.7 else "üü°" if confidence > 0.5 else "üî¥"
                    
                    with st.expander(
                        f"{conf_icon} –ü—É–∑—ã—Ä—å #{i+1} | {source_flag} ‚Üí {target_flag} | "
                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}"
                    ):
                        
                        col_orig, col_trans = st.columns(2)
                        
                        with col_orig:
                            st.markdown(f"**üî§ –û—Ä–∏–≥–∏–Ω–∞–ª ({source_flag} {get_language_name(source_lang)}):**")
                            original = st.text_area(
                                "–û—Ä–∏–≥–∏–Ω–∞–ª",
                                value=result['original_text'],
                                key=f"orig_{i}",
                                label_visibility="collapsed",
                                height=100
                            )
                        
                        with col_trans:
                            if source_lang == target_lang:
                                st.markdown(f"**üîÑ –ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞:**")
                            else:
                                st.markdown(f"**üåê –ü–µ—Ä–µ–≤–æ–¥ ({target_flag} {get_language_name(target_lang)}):**")
                                
                            translated = st.text_area(
                                "–ü–µ—Ä–µ–≤–æ–¥",
                                value=result['translated_text'],
                                key=f"trans_{i}",
                                label_visibility="collapsed",
                                height=100
                            )
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        st.caption(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result['bbox']}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if original != result['original_text']:
                            result['original_text'] = original
                            changes_made = True
                        if translated != result['translated_text']:
                            result['translated_text'] = translated
                            changes_made = True
                
                # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if changes_made and text_settings and text_settings.get('enable_inpainting'):
                    if st.button("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏", 
                                use_container_width=True, type="secondary"):
                        
                        with st.spinner("üé® –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                            try:
                                updated_image = inpainter.inpaint_and_replace_text(
                                    image_path, results, text_settings
                                )
                                
                                st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                st.subheader("üÜï –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                                st.image(updated_image, use_container_width=True)
                                
                                # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                create_download_link(updated_image, f"updated_{uploaded_file.name}")
                                
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
            if os.path.exists(image_path):
                os.remove(image_path)
            # –û—á–∏—â–∞–µ–º session state
            for key in ['results', 'image_path', 'text_settings']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()

if __name__ == "__main__":
    main()