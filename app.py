# app.py - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä—É—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
import streamlit as st
import numpy as np
from PIL import Image
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.detection import BubbleDetector
from src.ocr import TextExtractor
from src.translation import TextTranslator
from src.utils import (save_uploaded_file, validate_image, create_result_summary,
                       get_language_flag, get_language_name)
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Manga Translator",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_css():
    css_file = BASE_DIR / "static" / "styles.css"
    if css_file.exists():
        with open(css_file) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

@st.cache_resource
def load_models():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        detector = BubbleDetector(str(MODEL_PATH), DETECTION_CONFIDENCE)
        st.success("‚úÖ –ú–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
        return None, None, None
    
    try:
        ocr = TextExtractor()
        st.success("‚úÖ OCR —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
        return detector, None, None
    
    try:
        translator = TextTranslator()
        st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {e}")
        return detector, ocr, None
    
    return detector, ocr, translator

def process_manga_page_manual(image_path, detector, ocr, translator, source_lang, target_lang):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–Ω–≥–∏ —Å –†–£–ß–ù–´–ú –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –ø—É–∑—ã—Ä–µ–π
    with st.spinner("üîç –ü–æ–∏—Å–∫ —Ä–µ—á–µ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π..."):
        bubbles = detector.detect_bubbles(image_path)
    
    if not bubbles:
        st.warning("‚ö†Ô∏è –†–µ—á–µ–≤—ã–µ –ø—É–∑—ã—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
        return []
    
    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bubbles)} —Ä–µ—á–µ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π")
    
    # OCR –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    results = []
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, bubble in enumerate(bubbles):
        progress_bar.progress((i + 1) / len(bubbles))
        status_text.text(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–∑—ã—Ä—è {i+1}/{len(bubbles)} (—è–∑—ã–∫: {get_language_flag(source_lang)} {get_language_name(source_lang)})")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        original_text = ocr.extract_text_simple(image_path, bubble['bbox'], source_lang)
        
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        translated_text = ""
        if original_text:
            if source_lang != target_lang:
                translated_text = translator.translate(original_text, source_lang, target_lang)
            else:
                translated_text = original_text  # –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ—Å–ª–∏ —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        
        results.append({
            'bbox': bubble['bbox'],
            'confidence': bubble['confidence'],
            'class_id': bubble['class_id'],
            'original_text': original_text,
            'translated_text': translated_text,
            'source_language': source_lang,
            'target_language': target_lang
        })
    
    progress_bar.empty()
    status_text.empty()
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    load_css()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìö –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–∞–Ω–≥–∏ (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞)</h1>', 
                unsafe_allow_html=True)
    
    st.markdown("""
    ### üéØ –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥:
    - **üìù –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤** - –≤—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    - **üéØ –ë–µ–∑ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è** - –Ω–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    - **üåç 5 —è–∑—ã–∫–æ–≤ OCR**: üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π, üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π, üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π, üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, üá∑üá∫ –†—É—Å—Å–∫–∏–π
    - **üîÑ –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥** –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤")
    
    source_lang = st.sidebar.selectbox(
        "üî§ –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ):",
        options=['ja', 'ko', 'zh', 'en', 'ru'],
        format_func=lambda x: f"{get_language_flag(x)} {get_language_name(x)}",
        index=0,  # –Ø–ø–æ–Ω—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∞–Ω–≥–∏
        help="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–∞—à–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
    )
    
    target_lang = st.sidebar.selectbox(
        "üåê –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:",
        options=['ru', 'en', 'ja', 'ko', 'zh'],
        format_func=lambda x: f"{get_language_flag(x)} {get_language_name(x)}",
        index=0,  # –†—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        help="–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
    if source_lang == target_lang:
        st.sidebar.info("‚ÑπÔ∏è –Ø–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω")
    else:
        st.sidebar.success(f"‚úÖ {get_language_flag(source_lang)} ‚Üí {get_language_flag(target_lang)}")
    
    confidence = st.sidebar.slider(
        "üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏:",
        min_value=0.1,
        max_value=1.0,
        value=DETECTION_CONFIDENCE,
        step=0.1,
        help="–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è = –º–µ–Ω—å—à–µ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–∞—Ö
    with st.sidebar.expander("‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏"):
        st.write("**üî§ OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ):**")
        st.write("üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π - —Ö–∏—Ä–∞–≥–∞–Ω–∞, –∫–∞—Ç–∞–∫–∞–Ω–∞, –∫–∞–Ω–¥–∑–∏")
        st.write("üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π - —Ö–∞–Ω–≥—ã–ª—å")  
        st.write("üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π")
        st.write("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - –ª–∞—Ç–∏–Ω–∏—Ü–∞")
        st.write("üá∑üá∫ –†—É—Å—Å–∫–∏–π - –∫–∏—Ä–∏–ª–ª–∏—Ü–∞")
        
        st.write("**üåê –ü–µ—Ä–µ–≤–æ–¥:**")
        st.write("–õ—é–±—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Google Translate")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    with st.spinner("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π..."):
        detector, ocr, translator = load_models()
    
    if not all([detector, ocr, translator]):
        st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        return
    
    detector.confidence = confidence
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–Ω–≥–∏",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
    )
    
    if uploaded_file is not None:
        if not validate_image(uploaded_file):
            st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä")
            return
        
        image_path = save_uploaded_file(uploaded_file)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üì∏ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            image = Image.open(image_path)
            st.image(image, use_container_width=True)
            st.caption(f"–†–∞–∑–º–µ—Ä: {image.size[0]}√ó{image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å ({get_language_flag(source_lang)} ‚Üí {get_language_flag(target_lang)})", 
                     type="primary", use_container_width=True):
            
            results = process_manga_page_manual(
                image_path, detector, ocr, translator, source_lang, target_lang
            )
            
            if results:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏
                with col2:
                    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏")
                    bubbles = [{'bbox': r['bbox'], 'confidence': r['confidence']} 
                              for r in results]
                    visualization = detector.visualize_detection(image_path, bubbles)
                    st.image(visualization, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                summary = create_result_summary(results)
                
                st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                
                with col_stats1:
                    st.metric("üéØ –ù–∞–π–¥–µ–Ω–æ –ø—É–∑—ã—Ä–µ–π", summary['total_bubbles'])
                
                with col_stats2:
                    st.metric("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ç–µ–∫—Å—Ç–∞", 
                             f"{summary['successful_ocr']}/{summary['total_bubbles']}")
                    st.caption(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['ocr_success_rate']:.1f}%")
                
                with col_stats3:
                    if source_lang == target_lang:
                        st.metric("üîÑ –ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞", summary['total_bubbles'])
                        st.caption("–Ø–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
                    else:
                        st.metric("üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ", 
                                 f"{summary['successful_translation']}/{summary['total_bubbles']}")
                        st.caption(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['translation_success_rate']:.1f}%")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                
                for i, result in enumerate(results):
                    confidence = result['confidence']
                    source_flag = get_language_flag(source_lang)
                    target_flag = get_language_flag(target_lang)
                    
                    # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
                    conf_icon = "üü¢" if confidence > 0.7 else "üü°" if confidence > 0.5 else "üî¥"
                    
                    with st.expander(
                        f"{conf_icon} –ü—É–∑—ã—Ä—å #{i+1} | {source_flag} ‚Üí {target_flag} | "
                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}"
                    ):
                        
                        col_orig, col_trans = st.columns(2)
                        
                        with col_orig:
                            st.markdown(f"**üî§ –û—Ä–∏–≥–∏–Ω–∞–ª ({source_flag} {get_language_name(source_lang)}):**")
                            original = st.text_area(
                                "–û—Ä–∏–≥–∏–Ω–∞–ª",
                                value=result['original_text'],
                                key=f"orig_{i}",
                                label_visibility="collapsed",
                                height=100
                            )
                        
                        with col_trans:
                            if source_lang == target_lang:
                                st.markdown(f"**üîÑ –ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞:**")
                            else:
                                st.markdown(f"**üåê –ü–µ—Ä–µ–≤–æ–¥ ({target_flag} {get_language_name(target_lang)}):**")
                                
                            translated = st.text_area(
                                "–ü–µ—Ä–µ–≤–æ–¥",
                                value=result['translated_text'],
                                key=f"trans_{i}",
                                label_visibility="collapsed",
                                height=100
                            )
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        st.caption(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result['bbox']}")
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                        if original != result['original_text']:
                            result['original_text'] = original
                        if translated != result['translated_text']:
                            result['translated_text'] = translated
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                col_save, col_clear = st.columns(2)
                
                with col_save:
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
                        st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                with col_clear:
                    if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
                        st.rerun()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
            if os.path.exists(image_path):
                os.remove(image_path)
            st.rerun()

if __name__ == "__main__":
    main()