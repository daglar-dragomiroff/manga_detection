# src/inpainting.py - –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –∏ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from typing import List, Dict, Any, Tuple, Optional
import logging
import os

logger = logging.getLogger(__name__)

class TextInpainter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –º–∞–Ω–≥–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–ø–µ–π–Ω—Ç–µ—Ä–∞"""
        self.default_font_size = 16
        self.default_font_color = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π
        self.default_bg_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω
        self.fonts_cache = {}
        
    def inpaint_and_replace_text(self, 
                               image_path: str, 
                               results: List[Dict[str, Any]], 
                               text_settings: Dict[str, Any] = None) -> np.ndarray:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥
        
        Args:
            image_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –∏ –ø–µ—Ä–µ–≤–æ–¥–∞
            text_settings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ numpy array
        """
        if not results:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            return np.array(Image.open(image_path))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path).convert('RGB')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = self._get_default_settings()
        if text_settings:
            settings.update(text_settings)
        
        logger.info(f"üé® –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ª–∏–≤–∫—É {len(results)} –æ–±–ª–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        for i, result in enumerate(results):
            if result.get('translated_text', '').strip():
                logger.info(f"üñåÔ∏è –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ #{i+1}: '{result['translated_text']}'")
                image = self._process_text_region(image, result, settings)
        
        return np.array(image)
    
    def _get_default_settings(self) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'font_family': 'arial',
            'font_size': 16,
            'font_color': (0, 0, 0),      # –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            'bg_color': (255, 255, 255),  # –ë–µ–ª—ã–π —Ñ–æ–Ω
            'stroke_width': 0,            # –¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
            'stroke_color': (0, 0, 0),    # –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
            'padding': 5,                 # –û—Ç—Å—Ç—É–ø—ã
            'alignment': 'center',        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            'transparency': 1.0,          # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–æ–Ω–∞ (1.0 = –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
            'auto_font_size': True,       # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        }
    
    def _process_text_region(self, 
                           image: Image.Image, 
                           result: Dict[str, Any], 
                           settings: Dict[str, Any]) -> Image.Image:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        
        bbox = result['bbox']
        text = result['translated_text']
        
        x1, y1, x2, y2 = bbox
        width = x2 - x1
        height = y2 - y1
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if width < 10 or height < 10:
            logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: {width}x{height}")
            return image
        
        # 1. –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        image = self._inpaint_region(image, bbox, settings)
        
        # 2. –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        image = self._insert_text(image, bbox, text, settings)
        
        return image
    
    def _inpaint_region(self, 
                       image: Image.Image, 
                       bbox: List[int], 
                       settings: Dict[str, Any]) -> Image.Image:
        """–ó–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        
        x1, y1, x2, y2 = bbox
        bg_color = settings['bg_color']
        transparency = settings['transparency']
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è
        if transparency < 1.0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–µ—Ç–æ–¥
            overlay = Image.new('RGBA', image.size, (0, 0, 0, 0))
            draw = ImageDraw.Draw(overlay)
            
            # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            alpha = int(255 * transparency)
            fill_color = (*bg_color, alpha)
            draw.rectangle([x1, y1, x2, y2], fill=fill_color)
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
            image = Image.alpha_composite(image.convert('RGBA'), overlay).convert('RGB')
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
            draw = ImageDraw.Draw(image)
            draw.rectangle([x1, y1, x2, y2], fill=bg_color)
        
        return image
    
    def _insert_text(self, 
                    image: Image.Image, 
                    bbox: List[int], 
                    text: str, 
                    settings: Dict[str, Any]) -> Image.Image:
        """–í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç—å"""
        
        if not text.strip():
            return image
        
        x1, y1, x2, y2 = bbox
        width = x2 - x1
        height = y2 - y1
        
        # –ü–æ–ª—É—á–∞–µ–º —à—Ä–∏—Ñ—Ç
        font_size = settings['font_size']
        if settings['auto_font_size']:
            font_size = self._calculate_optimal_font_size(text, width, height, settings)
        
        font = self._get_font(settings['font_family'], font_size)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        wrapped_text = self._wrap_text(text, font, width - settings['padding'] * 2)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        text_x, text_y = self._calculate_text_position(
            wrapped_text, font, bbox, settings
        )
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        draw = ImageDraw.Draw(image)
        
        # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        if settings['stroke_width'] > 0:
            self._draw_text_with_stroke(
                draw, text_x, text_y, wrapped_text, font, 
                settings['font_color'], settings['stroke_color'], settings['stroke_width']
            )
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            draw.multiline_text(
                (text_x, text_y), wrapped_text, 
                font=font, fill=settings['font_color'],
                align=settings['alignment']
            )
        
        return image
    
    def _calculate_optimal_font_size(self, 
                                   text: str, 
                                   width: int, 
                                   height: int, 
                                   settings: Dict[str, Any]) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞"""
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        min_size = 8
        max_size = min(width // 2, height // 2, 48)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
        
        if max_size < min_size:
            return min_size
        
        best_size = min_size
        padding = settings['padding']
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        for font_size in range(min_size, max_size + 1, 2):
            font = self._get_font(settings['font_family'], font_size)
            wrapped_text = self._wrap_text(text, font, width - padding * 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
            bbox = self._get_text_bbox(wrapped_text, font)
            if bbox[2] <= width - padding * 2 and bbox[3] <= height - padding * 2:
                best_size = font_size
            else:
                break
        
        logger.info(f"üìè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {best_size}px –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ {width}x{height}")
        return best_size
    
    def _wrap_text(self, text: str, font: ImageFont.ImageFont, max_width: int) -> str:
        """–ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞–º"""
        words = text.split()
        lines = []
        current_line = []
        
        for word in words:
            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
            test_line = current_line + [word]
            test_text = ' '.join(test_line)
            
            bbox = font.getbbox(test_text)
            line_width = bbox[2] - bbox[0]
            
            if line_width <= max_width:
                current_line = test_line
            else:
                # –°–ª–æ–≤–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                if current_line:
                    lines.append(' '.join(current_line))
                    current_line = [word]
                else:
                    # –î–∞–∂–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º
                    lines.append(word)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if current_line:
            lines.append(' '.join(current_line))
        
        return '\n'.join(lines)
    
    def _calculate_text_position(self, 
                               text: str, 
                               font: ImageFont.ImageFont, 
                               bbox: List[int], 
                               settings: Dict[str, Any]) -> Tuple[int, int]:
        """–†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏"""
        
        x1, y1, x2, y2 = bbox
        width = x2 - x1
        height = y2 - y1
        padding = settings['padding']
        alignment = settings['alignment']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
        text_bbox = self._get_text_bbox(text, font)
        text_width = text_bbox[2]
        text_height = text_bbox[3]
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        text_y = y1 + (height - text_height) // 2
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        if alignment == 'center':
            text_x = x1 + (width - text_width) // 2
        elif alignment == 'right':
            text_x = x2 - text_width - padding
        else:  # left
            text_x = x1 + padding
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±–ª–∞—Å—Ç—å—é
        text_x = max(x1 + padding, min(text_x, x2 - text_width - padding))
        text_y = max(y1 + padding, min(text_y, y2 - text_height - padding))
        
        return text_x, text_y
    
    def _get_text_bbox(self, text: str, font: ImageFont.ImageFont) -> Tuple[int, int, int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞"""
        lines = text.split('\n')
        max_width = 0
        total_height = 0
        
        for line in lines:
            bbox = font.getbbox(line)
            line_width = bbox[2] - bbox[0]
            line_height = bbox[3] - bbox[1]
            
            max_width = max(max_width, line_width)
            total_height += line_height
        
        return (0, 0, max_width, total_height)
    
    def _get_font(self, font_family: str, font_size: int) -> ImageFont.ImageFont:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        cache_key = f"{font_family}_{font_size}"
        if cache_key in self.fonts_cache:
            return self.fonts_cache[cache_key]
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            if font_family.lower() == 'arial':
                # –†–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
                font_paths = [
                    "/System/Library/Fonts/Arial.ttf",  # macOS
                    "C:/Windows/Fonts/arial.ttf",       # Windows
                    "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",  # Linux
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",  # Linux –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                ]
                
                for path in font_paths:
                    if os.path.exists(path):
                        font = ImageFont.truetype(path, font_size)
                        break
                else:
                    # Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                    font = ImageFont.load_default()
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.truetype(font_family, font_size)
                
        except (IOError, OSError):
            # Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç {font_family}, –∏—Å–ø–æ–ª—å–∑—É–µ–º default")
            font = ImageFont.load_default()
        
        self.fonts_cache[cache_key] = font
        return font
    
    def _draw_text_with_stroke(self, 
                              draw: ImageDraw.ImageDraw, 
                              x: int, y: int, 
                              text: str, 
                              font: ImageFont.ImageFont, 
                              fill_color: Tuple[int, int, int], 
                              stroke_color: Tuple[int, int, int], 
                              stroke_width: int):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±–≤–æ–¥–∫–æ–π"""
        
        # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É (—Å–¥–≤–∏–≥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã)
        for dx in range(-stroke_width, stroke_width + 1):
            for dy in range(-stroke_width, stroke_width + 1):
                if dx != 0 or dy != 0:  # –ù–µ —Ä–∏—Å—É–µ–º –≤ —Ü–µ–Ω—Ç—Ä–µ
                    draw.multiline_text(
                        (x + dx, y + dy), text, 
                        font=font, fill=stroke_color
                    )
        
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö
        draw.multiline_text((x, y), text, font=font, fill=fill_color)

    def preview_settings(self, 
                        image_path: str, 
                        sample_bbox: List[int], 
                        sample_text: str, 
                        settings: Dict[str, Any]) -> np.ndarray:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π –æ–±–ª–∞—Å—Ç–∏
        
        Args:
            image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            sample_bbox: –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–µ–≤—å—é
            sample_text: –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            settings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–ø—Ä–µ–≤—å—é
        """
        image = Image.open(image_path).convert('RGB')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–≤—å—é
        fake_result = {
            'bbox': sample_bbox,
            'translated_text': sample_text
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å
        processed = self._process_text_region(image, fake_result, settings)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–µ–≤—å—é
        x1, y1, x2, y2 = sample_bbox
        cropped = processed.crop((
            max(0, x1 - 20), max(0, y1 - 20),
            min(processed.width, x2 + 20), min(processed.height, y2 + 20)
        ))
        
        return np.array(cropped)